(()=>{"use strict";var e={};(e=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})})(e);class t{constructor(e,t,o){this.model=t,this.em=e,Object.keys(o).forEach((e=>{if(!o[e]instanceof class{constructor(e){this.find=e}})throw new Error("invalid type");this[e]=(...t)=>this._methodsHandler(t,o[e])}))}async _methodsHandler(e,t){this.em.storage,this.em.cache[JSON.stringify()]}async find(e){return storage[e]||(storage[e]=await this.model.find(e)),new Proxy(this.model,{get:async(t,o,s)=>(console.log("storage[pk]",storage[e]),void 0!==storage[e]||(console.log(t),storage[e]=await t.find(e)),Reflect.get(storage[e],o,s))})}}console.log("start"),window.em=new class{constructor(){this.models={},this.storage={},this.cache={}}setModel(e){this.models[e.constructor.name]=new t(this,e)}},window.em.setModel(new class{constructor(){this.id={type:"primaryKey"},this.name={type:String},this.age={type:Number}}find(e){return fetch(`http://localhost:8000/api/authors/${e}`).then((e=>e.json())).then((e=>(console.log(e),e)))}}),console.log(e.default),window.uuid=e.default})();